class Appointment{

	depend java.sql.Date;
	depend java.sql.Time;
	depend java.time.Duration;
	depend java.time.LocalTime;
	depend ca.mcgill.ecse.flexibook.controller.ControllerUtils;
	depend ca.mcgill.ecse.flexibook.model.BusinessHour.DayOfWeek;
	depend java.time.LocalDateTime;
	depend ca.mcgill.ecse.flexibook.controller.TOTimeSlot;

	AppointmentStatus{

	Booked{
  
  	cancelAppointment(Date currentDate) [!isOnSameDayAsAppointment(currentDate)]-> FinalState;
 
  	updateAppointmentTime(Date newDate ,Time newStartTime, Date currentDate, Time currentTime)[isGoodForTimeUpdate(newDate,newStartTime,currentDate,currentTime) 
  	&& isBeforeToday(currentDate)]/{doUpdateTime(newDate , newStartTime);}->Booked;
  
  	updateAppointmentContent(String action, String optService, Date currentDate, Time currentTime)
  	[isGoodForContentUpdate(action, optService, currentDate,currentTime ) && !isOnSameDayAsAppointment(currentDate) ]/{doUpdateContent(action, optService);}->Booked;
  
  	startAppointment(Date currentDate, Time currentTime)[hasReachedStartTime(currentDate, currentTime)] -> InProgress;

  	registeredNoShow()/{incrementNoShow();} -> FinalState; 
 
	}

	InProgress{
  
  	updateAppointmentContent(String action, String optService, Date currentDate, Time currentTime)
  	[isGoodForContentUpdate(action,optService,currentDate,currentTime)]/{doUpdateContent(action, optService);}-> InProgress;
  
  	finishedAppointment() -> FinalState ;
  
	}

	FinalState{

  	entry/{this.delete();}

		}    
		
		
	}
	
	

  // line 51 "../../../../../FlexiBookStateMachine.ump"
   public void doUpdateTime(Date newDate, Time newStartTime){
    // get duration of the original service
		TimeSlot oldTimeSlot = getTimeSlot();
		Duration d = Duration.between(oldTimeSlot.getStartTime().toLocalTime(), oldTimeSlot.getEndTime().toLocalTime());
		// get the duration to set new end time. Since there is no change in combo item, the time is same
		int durationMinutes = (int) d.toMinutes();
		Time newEndTime = Time.valueOf(newStartTime.toLocalTime().plusMinutes(durationMinutes));
		TimeSlot timeSlot = new TimeSlot(newDate, newStartTime, newDate, newEndTime, getFlexiBook());
		setTimeSlot(timeSlot);
  }



  // line 63 "../../../../../FlexiBookStateMachine.ump"
   private void doUpdateContent(String action, String optService){
    if(getBookableService() instanceof ServiceCombo) {
    	  	
    	TimeSlot oldTimeSlot = getTimeSlot();

		// Scenario: check if the request on adding and removing is legitimate, aka can not remove a mandatory service
		if (action.equals("remove")) {
				if(findServiceCombo(this.getBookableService().getName()).getMainService().getService().getName().equals(optService)) {
					// bad request: cannot remove main service
					return;
				}

			// since appInSystem.getChosenItems() is inmutable by umple, have to create a deep copy here to iterate
			List<ComboItem> copy= new ArrayList<ComboItem>();
			for(ComboItem item: getChosenItems()) {
				copy.add(item);
			}
			for(ComboItem item: copy) {
					if(item.getService().getName().equals(optService)) {
						if(item.getMandatory()) {
							// bad request: cannot remove mandatory service
							return;
						}else {					
							removeChosenItem(item);
						}
					}	
			}
		}else if (action.equals("add")) {
			
			List<ComboItem> newListComboItem = new ArrayList<ComboItem>();
			for(ComboItem item: findServiceCombo(this.getBookableService().getName()).getServices()) {
				// iterate through the combo as a template
				// iN THIS MANNER the combo item in the appointment will also follow certain order!
				// 1. ADD MANDATORY
				if(item.getMandatory() == true) {
					newListComboItem.add(item);
				}else {
					// 2. keeps the ones already exist
					if (getChosenItems().contains(item)) {
						newListComboItem.add(item);
					}else {
						// 3. add the chosen one
							if(optService.equals(item.getService().getName())) {
								newListComboItem.add(item);
							}
							
					}
					
					
				}
			}
			
			List<ComboItem> existingItems = getChosenItems();
			int index = 0;
			for(ComboItem newitem: newListComboItem) {
					if (!existingItems.contains(newitem)) {
						addChosenItemAt(newitem, index);
				}
				index++;
			}

		}
			int newDuration = calcActualTimeOfAppointment(getChosenItems());
			Time newEndTime = Time.valueOf(oldTimeSlot.getStartTime().toLocalTime().plusMinutes(newDuration));
			TimeSlot timeSlot = new TimeSlot(oldTimeSlot.getStartDate(), oldTimeSlot.getStartTime(), oldTimeSlot.getEndDate(), 
					newEndTime, getFlexiBook());
			
			setTimeSlot(timeSlot);

	  }else if(getBookableService() instanceof Service) {
		  Service s = null;
		  for (BookableService bservice : getFlexiBook().getBookableServices()) {
				if (bservice.getName().equals(optService) && bservice instanceof Service) {
					s = (Service)bservice;
					break;
				}
			}
		  if(s != null) {
			  
			  setBookableService(s);
			  
			  // Shouldnt need this step since the original service is a single service already
			  if(chosenItems.size() !=0) {
				  chosenItems.clear();
			  }
			  Time startTime = getTimeSlot().getStartTime();
			  LocalTime aEndtime = startTime.toLocalTime().plusMinutes(s.getDuration());
			  Time endTime = Time.valueOf(aEndtime);
			  this.getTimeSlot().setEndTime(endTime);
		  }
	  }
	   
  }


  // line 161 "../../../../../FlexiBookStateMachine.ump"
   public void incrementNoShow(){
    int noShowCount = this.getCustomer().getNoShowCount();
		noShowCount++;
		this.getCustomer().setNoShowCount(noShowCount);
  }


  // line 168 "../../../../../FlexiBookStateMachine.ump"
   public boolean isGoodForTimeUpdate(Date newDate,Time newStartTime,Date currentDate, Time currentTime){
	   
	 //--------------------------------- Implemented by AntoineW -----------------------------------------------------------------
		// get duration of the original service
		TimeSlot oldTimeSlot = getTimeSlot();
		Duration d = Duration.between(oldTimeSlot.getStartTime().toLocalTime(), oldTimeSlot.getEndTime().toLocalTime());
		// get the duration to set new end time. Since there is no change in combo item, the time is same
		int durationMinutes = (int) d.toMinutes();
		Time newEndTime = Time.valueOf(newStartTime.toLocalTime().plusMinutes(durationMinutes));


		TimeSlot timeSlot = new TimeSlot(newDate, newStartTime, newDate, newEndTime, getFlexiBook());
		int index = getFlexiBook().indexOfTimeSlot(timeSlot);
		int oldIndex = getFlexiBook().indexOfTimeSlot(oldTimeSlot);

		if (!isInGoodTiming(timeSlot, index, oldIndex, this.getAppointmentStatus(),currentDate, currentTime)) {
			getFlexiBook().removeTimeSlot(timeSlot);
			return false;
		}

	   
    //--------------------------------- Implemented by Mike Wang & -----------------------------------------------------------------
    List<TimeSlot> vacations = getFlexiBook().getBusiness().getVacation();
    List<TimeSlot> holidays = getFlexiBook().getBusiness().getHolidays();
    //check if overlapping with other appointment
		for(Appointment a : getFlexiBook().getAppointments()){
			if(a.getTimeSlot().getStartDate().equals(getTimeSlot().getStartDate()) 
					&& getTimeSlot().getStartTime().before(a.getTimeSlot().getStartTime())  
					&& getTimeSlot().getEndTime().after(a.getTimeSlot().getStartTime())
					&& (getFlexiBook().getAppointments().indexOf(a) != getFlexiBook().getAppointments().indexOf(this))){
				return false;
			}
		}
	// check vacations
		for (TimeSlot vacation: vacations) {
			if(vacation.getStartDate().equals(getTimeSlot().getStartDate()) 
					&& vacation.getStartTime().before(getTimeSlot().getStartTime())
					&& vacation.getStartTime().after(getTimeSlot().getEndDate())) {
				return false;
			}
			
		}
	// check holidays 
		for (TimeSlot holiday: holidays) {
			if(holiday.getStartDate().equals(getTimeSlot().getStartDate()) 
					&& holiday.getStartTime().before(getTimeSlot().getStartTime())
					&& holiday.getStartTime().after(getTimeSlot().getEndDate())) {
				return false;
			}
			
		}
		return true;
  }


  // line 203 "../../../../../FlexiBookStateMachine.ump"
   public boolean hasReachedStartTime(Date date, Time time){
    Time tempTime = getTimeSlot().getStartTime();
		boolean check = false;
		if ((time.after(tempTime) || time.equals(tempTime)) && date.equals(getTimeSlot().getStartDate())) {
			check = true;
		}
		return check;
  }


  // line 213 "../../../../../FlexiBookStateMachine.ump"
   public boolean isOnSameDayAsAppointment(Date date){
    Date tempToday = getTimeSlot().getStartDate();
		boolean check = false; 
		if (date.equals(tempToday)) {
			check = true;
		}
		return check;
  }

  // line 223 "../../../../../FlexiBookStateMachine.ump"
   public boolean isBeforeToday(Date date){
    Date tempToday = getTimeSlot().getStartDate();
	   boolean check = false;
	   if (date.before(tempToday)) {
		   check =true;
	   }
	   return check;
  }


  // line 233 "../../../../../FlexiBookStateMachine.ump"
   public boolean isGoodForContentUpdate(String action, String optService, Date currentDate, Time currentTime){
	   
	 //--------------------------------- Implemented by AntoineW -----------------------------------------------------------------
		TimeSlot oldTimeSlot = getTimeSlot();

		// Scenario: check if the request on adding and removing is legitimate, aka can not remove a mandatory service
		if (action.equals("remove")) {
				if(findServiceCombo(this.getBookableService().getName()).getMainService().getService().getName().equals(optService)) {
					// bad request: cannot remove main service
					return false;
				}

			// since appInSystem.getChosenItems() is inmutable by umple, have to create a deep copy here to iterate
			List<ComboItem> copy= new ArrayList<ComboItem>();
			for(ComboItem item: getChosenItems()) {
				copy.add(item);
			}
			for(ComboItem item: copy) {
					if(item.getService().getName().equals(optService)) {
						if(item.getMandatory()) {
							
							return false;
							}

					}	
			}
		}else if (action.equals("add")) {
			// add: there is no restriction for adding option service other than time
			// thus do nothing in this part.
		}
		Service s = null;
	    for(BookableService service: getFlexiBook().getBookableServices()) {
	    	if(service.getName().equals(optService)) {
	    		s = (Service)service;
	    	}
	    }
		if(getBookableService() instanceof Service) {
			
			LocalTime aEndtime = getTimeSlot().getStartTime().toLocalTime().plusMinutes(s.getDuration());
			Time newEndTime  = Time.valueOf(aEndtime);
			TimeSlot timeSlot = new TimeSlot(oldTimeSlot.getStartDate(), oldTimeSlot.getStartTime(), oldTimeSlot.getEndDate(), 
					newEndTime, getFlexiBook());
			int index = getFlexiBook().indexOfTimeSlot(timeSlot);
			int oldIndex = getFlexiBook().indexOfTimeSlot(oldTimeSlot);
			if (!isInGoodTiming(timeSlot, index, oldIndex, this.getAppointmentStatus(),currentDate, currentTime)) {
				getFlexiBook().removeTimeSlot(timeSlot);
				return false;
			}
			
		}else {

			int addOrMinusTime = 1;
			if (action.equals("remove")) {
				// remove means minus time since the slot is shorter
				addOrMinusTime = -1;
			}
			LocalTime aEndtime = getTimeSlot().getEndTime().toLocalTime().plusMinutes(addOrMinusTime*s.getDuration());
			Time newEndTime  = Time.valueOf(aEndtime);

			TimeSlot timeSlot = new TimeSlot(oldTimeSlot.getStartDate(), oldTimeSlot.getStartTime(), oldTimeSlot.getEndDate(), 
						newEndTime, getFlexiBook());
			int index = getFlexiBook().indexOfTimeSlot(timeSlot);
			int oldIndex = getFlexiBook().indexOfTimeSlot(oldTimeSlot);
			
			if (!isInGoodTiming(timeSlot, index, oldIndex, this.getAppointmentStatus(),currentDate, currentTime)) {
				getFlexiBook().removeTimeSlot(timeSlot);
				// remove all newly added service since the time is not good
				// update fails, later return false
				for(ComboItem item: findServiceCombo(this.getBookableService().getName()).getServices()) {
					if(item.getService().getName().equals(optService)) {
						removeChosenItem(item);
					}
				}
				return false;
			}

		}
		
		// ----------------------------------------------  Implemented by Mike Wang, Chen Charles & ----------------------------------
	    List<TimeSlot> vacations = getFlexiBook().getBusiness().getVacation();
	    List<TimeSlot> holidaySlots = getFlexiBook().getBusiness().getHolidays();
		// 1. check with vacation
		for (TimeSlot vacation: vacations) {
			if(getBookableService() instanceof Service) {
				
				LocalDateTime vStart = ControllerUtils.combineDateAndTime(vacation.getStartDate(), vacation.getStartTime());
				LocalDateTime vEnd = ControllerUtils.combineDateAndTime(vacation.getEndDate(), vacation.getEndTime());
				
				LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
				
				LocalDateTime aNewEnd = aStart.plusMinutes(s.getDuration());
				
				if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
					return false;
				}
				
			}else if(getBookableService() instanceof ServiceCombo) {
				LocalDateTime vStart = ControllerUtils.combineDateAndTime(vacation.getStartDate(), vacation.getStartTime());
				LocalDateTime vEnd = ControllerUtils.combineDateAndTime(vacation.getEndDate(), vacation.getEndTime());
				
				LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
				LocalDateTime aEnd = ControllerUtils.combineDateAndTime(this.getTimeSlot().getEndDate(), this.getTimeSlot().getEndTime());
				
				LocalDateTime aNewEnd = aEnd.plusMinutes(s.getDuration());
				
				if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
					return false;
				}
			}
		}
		
		// 2. check with holiday
				for (TimeSlot holiday: holidaySlots) {
					if(getBookableService() instanceof Service) {
						
						LocalDateTime vStart = ControllerUtils.combineDateAndTime(holiday.getStartDate(), holiday.getStartTime());
						LocalDateTime vEnd = ControllerUtils.combineDateAndTime(holiday.getEndDate(), holiday.getEndTime());
						
						LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
						
						LocalDateTime aNewEnd = aStart.plusMinutes(s.getDuration());
						
						if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
							return false;
						}
						
					}else if(getBookableService() instanceof ServiceCombo) {
						LocalDateTime vStart = ControllerUtils.combineDateAndTime(holiday.getStartDate(), holiday.getStartTime());
						LocalDateTime vEnd = ControllerUtils.combineDateAndTime(holiday.getEndDate(), holiday.getEndTime());
						
						LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
						LocalDateTime aEnd = ControllerUtils.combineDateAndTime(this.getTimeSlot().getEndDate(), this.getTimeSlot().getEndTime());
						
						LocalDateTime aNewEnd = aEnd.plusMinutes(s.getDuration());
						
						if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
							return false;
						}
					}
				}
		
		return true;
  }


  // line 366 "../../../../../FlexiBookStateMachine.ump"
   private static  int calcActualTimeOfAppointment(List<ComboItem> comboItemList){
    int actualTime = 0;

		for (ComboItem ci : comboItemList) {
			actualTime = actualTime + ci.getService().getDuration();
		}

		return actualTime;
  }
   
   
   private ServiceCombo findServiceCombo(String name) {
		for (BookableService bservice : getFlexiBook().getBookableServices()) {
			if (bservice.getName().equals(name) && bservice instanceof ServiceCombo) {
				return (ServiceCombo)bservice;
			}
		}
		return null;
	}
   private boolean isInGoodTiming(TimeSlot timeSlot, int index, int oldIndex, AppointmentStatus status,Date currentDate, Time currentTime) {

		// here handle Scenario: A customer attempts to make various invalid appointments for services
		// there are three time constraints to check:
		// 1. if in the business time, if not, fail directly
		// 		2. if overlap with other time slot (other appointment/vacation/holiday). if there is overlap, we check the downtime!
		// 		3. if not in the downtime of other app, fail
		if (!isDuringWorkTime(timeSlot)) {
			return false;
		}else {
			if(!isNotOverlapWithOtherTimeSlots (timeSlot, index, oldIndex)) {
				if (!isDuringDowntime(timeSlot)) {
					return false;
				}
			}
		}

		// Make sure appointment is made in the future not in the past
		
		if(status != AppointmentStatus.InProgress) {
		if (!isInTheFuture(timeSlot,currentDate,currentTime)) {
			return false;
		}
		}
		return true;
	}
   
	/**
	 * Check if the time slot overlaps with other appointment
	 * solves constraint: checks whether there is no overlap between two time slots
	 * @author AntoineW
	 */
	private boolean isNotOverlapWithOtherTimeSlots(TimeSlot timeSlot, int index, int oldIndex) {
		FlexiBook flexiBook = getFlexiBook();
		LocalDateTime timeSlotStart = ControllerUtils.combineDateAndTime(timeSlot.getStartDate(), timeSlot.getStartTime());
		LocalDateTime timeSlotEnd = ControllerUtils.combineDateAndTime(timeSlot.getEndDate(), timeSlot.getEndTime());

		boolean isTheCase = true;

		for (TimeSlot ts :flexiBook.getTimeSlots()){
			LocalDateTime tsStart = ControllerUtils.combineDateAndTime(ts.getStartDate(), ts.getStartTime());
			LocalDateTime tsEnd = ControllerUtils.combineDateAndTime(ts.getEndDate(), ts.getEndTime());


			if(timeSlotEnd.isBefore(tsStart) || tsEnd.isBefore(timeSlotStart) || timeSlotEnd.equals(tsStart)||tsEnd.equals(timeSlotStart) ||
					flexiBook.getTimeSlots().indexOf(ts) ==  index ||
					flexiBook.getTimeSlots().indexOf(ts) ==  oldIndex) {
				isTheCase = true;
			}else {
				isTheCase = false;
				break;
			}
		}		
		return isTheCase;
	}

	/**
	 * appointments do not overlap UNLESS the overlap is during the downtime;
	 * @param timeSlot
	 * @return
	 * @author AntoineW
	 */
	private boolean isDuringDowntime(TimeSlot timeSlot) {

		// Initially false, if there is a downtime period completely contains a timeslot
		// then will be turned true
		boolean isDuringDowntime = false;

		FlexiBook flexiBook = getFlexiBook();

		LocalDateTime timeSlotStart = ControllerUtils.combineDateAndTime(timeSlot.getStartDate(), timeSlot.getStartTime());
		LocalDateTime timeSlotEnd = ControllerUtils.combineDateAndTime(timeSlot.getEndDate(), timeSlot.getEndTime());

		for (Appointment app: flexiBook.getAppointments()) {

			List<TOTimeSlot> tsList = ControllerUtils.getDowntimesByAppointment(app);
			for(TOTimeSlot TOTs: tsList) {
				LocalDateTime tsStart = ControllerUtils.combineDateAndTime(TOTs.getStartDate(), TOTs.getStartTime());
				LocalDateTime tsEnd = ControllerUtils.combineDateAndTime(TOTs.getEndDate(), TOTs.getEndTime());

				if((timeSlotStart.isAfter(tsStart)||timeSlotStart.equals(tsStart))
						&& (timeSlotEnd.isBefore(tsEnd)||timeSlotEnd.equals(tsEnd))) {
					isDuringDowntime = true;
					break;
				}
			}		
		}
		return isDuringDowntime;
	}


	/**
	 * appointment cannot be made on holidays or during vacation
	 * @param timeSlot
	 * @return
	 * @author AntoineW
	 */
	private boolean isDuringWorkTime(TimeSlot timeSlot) {

		boolean isDuringWorkTime = false;

		//First get the weekday
		DayOfWeek dOfWeek = ControllerUtils.getDoWByDate(timeSlot.getStartDate());
		// then check all businessHour list
		List<BusinessHour> bhList =getFlexiBook().getBusiness().getBusinessHours();
		for(BusinessHour bh: bhList) {
			// check weekday

			if(dOfWeek .equals(bh.getDayOfWeek())) {
				// if the appointment is on that day, compare if the time slot is included by business hour
				if((timeSlot.getStartTime().toLocalTime().isAfter(bh.getStartTime().toLocalTime())
						|| timeSlot.getStartTime().toLocalTime().equals(bh.getStartTime().toLocalTime()))
						&&
						timeSlot.getEndTime().toLocalTime().isBefore(bh.getEndTime().toLocalTime())
						|| timeSlot.getEndTime().toLocalTime().equals(bh.getEndTime().toLocalTime())) {
					isDuringWorkTime = true;
					break;
				}
			}

		}
		return isDuringWorkTime;
	}

	/**
	 * Check if the appointment is made before now (which is not allowed)
	 * @param timeSlot
	 * @return
	 * 
	 * @author AntoineW
	 */
	 private boolean isInTheFuture(TimeSlot timeSlot,Date currentDate, Time currentTime){
    boolean isInFuture = true;
		LocalDateTime now = ControllerUtils.combineDateAndTime(currentDate, currentTime);

		LocalDateTime appointmentDateTime = ControllerUtils.combineDateAndTime(timeSlot.getStartDate(), timeSlot.getStartTime());
		if(appointmentDateTime.isBefore(now)) {
			isInFuture = false;
		}

		return isInFuture;
  }
 }
