class Appointment{

	depend java.sql.Date;
	depend java.sql.Time;
	depend java.time.Duration;
	depend java.time.LocalTime;
	depend ca.mcgill.ecse.flexibook.controller.ControllerUtils;

	AppointmentStatus{

	Booked{
  
  	cancelAppointment(Date currentDate) [!SameDay(currentDate)]-> FinalState;
 
  	updateAppointmentTime(Date newDate ,Time newStartTime, Date currentDate)[!isOnHoliday(newDate,newStartTime,currentDate)&&!isOnVacation(newDate,newStartTime,currentDate)&&isInGoodTimeSlot() && !SameDay(currentDate)]/
  	{updateTime(newDate , newStartTime);}->Booked;
  
  	updateAppointmentContent(String action, String optService, Date currentDate, Time currentTime)[isInGoodTimeSlotForUpdate(optService) && !SameDay(currentDate) ]/
  	{updateContent(action, optService);}->Booked;
  
  	startAppointment(Date currentDate, Time currentTime)[goodStartTime(currentDate, currentTime)] -> InProgress;

  	registeredNoShow()/{incrementNoShow();} -> FinalState; 
 
	}

	InProgress{
  
  	updateAppointmentContent(String action, String optService, Date currentDate, Time currentTime)[isInGoodTimeSlotForUpdate(optService)]
  	/{updateContent(action, optService);}-> InProgress;
  
  	finishedAppointment() -> FinalState ;
  
	}

	FinalState{

  	entry/{this.delete();}

		}    
		
		
	}
	
	

   public void updateTime(Date newDate, Time newStartTime){
    // get duration of the original service
		TimeSlot oldTimeSlot = getTimeSlot();
		Duration d = Duration.between(oldTimeSlot.getStartTime().toLocalTime(), oldTimeSlot.getEndTime().toLocalTime());
		// get the duration to set new end time. Since there is no change in combo item, the time is same
		int durationMinutes = (int) d.toMinutes();
		Time newEndTime = Time.valueOf(newStartTime.toLocalTime().plusMinutes(durationMinutes));
		TimeSlot timeSlot = new TimeSlot(newDate, newStartTime, newDate, newEndTime, getFlexiBook());
		setTimeSlot(timeSlot);
  }


public void updateContent(String action, String optService){
	   if (isInGoodTimeSlotForUpdate(optService)) {
    if(getBookableService() instanceof ServiceCombo) {
    	
    		
    	
    	TimeSlot oldTimeSlot = getTimeSlot();
    	ServiceCombo sc = (ServiceCombo)getBookableService();
    	List<String> serviceNameList = ControllerUtils.parseString(optService, ",");
		List<ComboItem> newlyAddedItem = new ArrayList<ComboItem>();
		
		if (action.equals("remove")) {

			// since appInSystem.getChosenItems() is inmutable by umple, have to create a deep copy here to iterate
			List<ComboItem> copy= new ArrayList<ComboItem>();
			for(ComboItem item: getChosenItems()) {
				copy.add(item);
			}
			for(ComboItem item: copy) {
				for (String name: serviceNameList) {
					// When we search that there is a name mentioned in the request
					// we check if it is mandatory or main service.
					// we can only removed it if the above two conditions are both wrong.
					if(item.getService().getName().equals(name)) {
						if(!item.getMandatory() && !name.equals(sc.getMainService().getService().getName())) {
							removeChosenItem(item);
						}
					}	
				}
			}
		}else if(action.equals("add")) {
				List<ComboItem> newListComboItem = new ArrayList<ComboItem>();
			
			for(ComboItem item: sc.getServices()) {
				// iterate through the combo as a template
				// iN THIS MANNER the combo item in the appointment will also follow certain order!
				// 1. ADD MANDATORY
				if(item.getMandatory() == true) {
					newListComboItem.add(item);
				}else {
					// 2. keeps the ones already exist
					if (getChosenItems().contains(item)) {
						newListComboItem.add(item);
					}else {
						// 3. add the chosen one
						for(String name: serviceNameList) {
							if(name.equals(item.getService().getName())) {
								newListComboItem.add(item);
							}
							
						}
						
					}
					
					
				}
			}
			
			this.chosenItems = newListComboItem;

			
			int newDuration = calcActualTimeOfAppointment(getChosenItems());
			Time newEndTime = Time.valueOf(oldTimeSlot.getStartTime().toLocalTime().plusMinutes(newDuration));
			TimeSlot timeSlot = new TimeSlot(oldTimeSlot.getStartDate(), oldTimeSlot.getStartTime(), oldTimeSlot.getEndDate(), 
					newEndTime, getFlexiBook());
			
			setTimeSlot(timeSlot);
			

			
		}
		  
	  }else if(getBookableService() instanceof Service) {
		  Service s = null;
		  for (BookableService bservice : getFlexiBook().getBookableServices()) {
				if (bservice.getName().equals(optService) && bservice instanceof Service) {
					s = (Service)bservice;
					break;
				}
			}
		  if(s != null) {
			  
			  setBookableService(s);
			  
			  // Shouldnt need this step since the original service is a single service already
			  if(chosenItems.size() !=0) {
				  chosenItems.clear();
			  }
			  Time startTime = getTimeSlot().getStartTime();
			  LocalTime aEndtime = startTime.toLocalTime().plusMinutes(s.getDuration());
			  Time endTime = Time.valueOf(aEndtime);
			  this.getTimeSlot().setEndTime(endTime);
		  }
	  }
	   }
  }


   public void incrementNoShow(){
    int noShowCount = this.getCustomer().getNoShowCount();
		noShowCount++;
		this.getCustomer().setNoShowCount(noShowCount);
  }


   public boolean isInGoodTimeSlot(){
    boolean check = true;
		for(Appointment a : getFlexiBook().getAppointments()){
			if(a.getTimeSlot().getStartDate().equals(getTimeSlot().getStartDate()) && getTimeSlot().getStartTime().before(a.getTimeSlot().getStartTime())  && getTimeSlot().getEndTime().after(a.getTimeSlot().getStartTime())){
				check = false;
			}
		}
		return check;
  }


   public boolean goodStartTime(Date date, Time time){
    Time tempTime = getTimeSlot().getStartTime();
		boolean check = false;
		if ((time.after(tempTime) || time.equals(tempTime)) && date.equals(getTimeSlot().getStartDate())) {
			check = true;
		}
		return check;
  }


   public boolean SameDay(Date date){
    Date tempToday = getTimeSlot().getStartDate();
		boolean check = false; 
		if (date.equals(tempToday)) {
			check = true;
		}
		return check;
  }



	   public boolean isInGoodTimeSlotForUpdate(String optService){
	    boolean check = true;
	    Service s = null;
	    for(BookableService service: getFlexiBook().getBookableServices()) {
	    	if(service.getName().equals(optService)) {
	    		s = (Service)service;
	    	}
	    }
		for(Appointment a : getFlexiBook().getAppointments()){
			// only check appointment on the same day
			if(a.getTimeSlot().getStartDate().equals(getTimeSlot().getStartDate())&& 
					getFlexiBook().getAppointments().indexOf(a) != getFlexiBook().getAppointments().indexOf(this)) {
				// if single service: replace the endtime with new duration
				if(getBookableService() instanceof Service) {
					LocalTime aEndtime = getTimeSlot().getStartTime().toLocalTime().plusMinutes(s.getDuration());
					Time newEndTime  = Time.valueOf(aEndtime);
					if(newEndTime.after(a.getTimeSlot().getStartTime())) {
						check = false;
					}
				// if service combo, meaning we are appending something, we add to the endtime
				}else if(getBookableService() instanceof ServiceCombo) {
					LocalTime aEndtime = getTimeSlot().getEndTime().toLocalTime().plusMinutes(s.getDuration());
					Time newEndTime  = Time.valueOf(aEndtime);
					if(newEndTime.after(a.getTimeSlot().getStartTime())) {
						check = false;
					}
					
				}
				
			}
		}
		return check;
	  }

   private static  int calcActualTimeOfAppointment(List<ComboItem> comboItemList){
    int actualTime = 0;

		for (ComboItem ci : comboItemList) {
			actualTime = actualTime + ci.getService().getDuration();
		}

		return actualTime;
  }
  
  private static boolean isInGoodTiming(TimeSlot timeSlot, int index, int oldIndex) {

		// here handle Scenario: A customer attempts to make various invalid appointments for services
		// there are three time constraints to check:
		// 1. if in the business time, if not, fail directly
		// 		2. if overlap with other time slot (other appointment/vacation/holiday). if there is overlap, we check the downtime!
		// 		3. if not in the downtime of other app, fail
		if (!isDuringWorkTime(timeSlot)) {
			return false;
		}else {
			if(!isNotOverlapWithOtherTimeSlots (timeSlot, index, oldIndex)) {
				if (!isDuringDowntime(timeSlot)) {
					return false;
				}
			}
		}

		// Make sure appointment is made in the future not in the past
		if (!isInTheFuture(timeSlot)) {
			return false;
		}
		return true;
	}
	
	private static boolean isDuringWorkTime(TimeSlot timeSlot) {

		boolean isDuringWorkTime = false;

		//First get the weekday
		DayOfWeek dOfWeek = ControllerUtils.getDoWByDate(timeSlot.getStartDate());
		// then check all businessHour list
		List<BusinessHour> bhList = FlexiBookApplication.getFlexiBook().getBusiness().getBusinessHours();
		for(BusinessHour bh: bhList) {
			// check weekday

			if(dOfWeek .equals(bh.getDayOfWeek())) {
				// if the appointment is on that day, compare if the time slot is included by business hour
				if((timeSlot.getStartTime().toLocalTime().isAfter(bh.getStartTime().toLocalTime())
						|| timeSlot.getStartTime().toLocalTime().equals(bh.getStartTime().toLocalTime()))
						&&
						timeSlot.getEndTime().toLocalTime().isBefore(bh.getEndTime().toLocalTime())
						|| timeSlot.getEndTime().toLocalTime().equals(bh.getEndTime().toLocalTime())) {
					isDuringWorkTime = true;
					break;
				}
			}

		}
		return isDuringWorkTime;
	}
	
	private static boolean isNotOverlapWithOtherTimeSlots(TimeSlot timeSlot, int index, int oldIndex) {
		FlexiBook flexiBook = FlexiBookApplication.getFlexiBook();
		LocalDateTime timeSlotStart = ControllerUtils.combineDateAndTime(timeSlot.getStartDate(), timeSlot.getStartTime());
		LocalDateTime timeSlotEnd = ControllerUtils.combineDateAndTime(timeSlot.getEndDate(), timeSlot.getEndTime());

		boolean isTheCase = true;

		for (TimeSlot ts :flexiBook.getTimeSlots()){
			LocalDateTime tsStart = ControllerUtils.combineDateAndTime(ts.getStartDate(), ts.getStartTime());
			LocalDateTime tsEnd = ControllerUtils.combineDateAndTime(ts.getEndDate(), ts.getEndTime());


			if(timeSlotEnd.isBefore(tsStart) || tsEnd.isBefore(timeSlotStart) || timeSlotEnd.equals(tsStart)||tsEnd.equals(timeSlotStart) ||
					flexiBook.getTimeSlots().indexOf(ts) ==  index ||
					flexiBook.getTimeSlots().indexOf(ts) ==  oldIndex) {
				isTheCase = true;
			}else {
				isTheCase = false;
				break;
			}
		}		
		return isTheCase;
	}
	private static boolean isInTheFuture(TimeSlot timeSlot) {
		boolean isInFuture = true;
		Date currentDate = FlexiBookApplication.getCurrentDate(true);
		Time currentTime = FlexiBookApplication.getCurrentTime(true);
		LocalDateTime now = ControllerUtils.combineDateAndTime(currentDate, currentTime);

		LocalDateTime appointmentDateTime = ControllerUtils.combineDateAndTime(timeSlot.getStartDate(), timeSlot.getStartTime());
		if(appointmentDateTime.isBefore(now)) {
			isInFuture = false;
		}

		return isInFuture;

  }
  
  private static boolean isDuringDowntime(TimeSlot timeSlot) {

		// Initially false, if there is a downtime period completely contains a timeslot
		// then will be turned true
		boolean isDuringDowntime = false;

		FlexiBook flexiBook = FlexiBookApplication.getFlexiBook();

		LocalDateTime timeSlotStart = ControllerUtils.combineDateAndTime(timeSlot.getStartDate(), timeSlot.getStartTime());
		LocalDateTime timeSlotEnd = ControllerUtils.combineDateAndTime(timeSlot.getEndDate(), timeSlot.getEndTime());

		for (Appointment app: flexiBook.getAppointments()) {

			List<TOTimeSlot> tsList = ControllerUtils.getDowntimesByAppointment(app);
			for(TOTimeSlot TOTs: tsList) {
				LocalDateTime tsStart = ControllerUtils.combineDateAndTime(TOTs.getStartDate(), TOTs.getStartTime());
				LocalDateTime tsEnd = ControllerUtils.combineDateAndTime(TOTs.getEndDate(), TOTs.getEndTime());

				if((timeSlotStart.isAfter(tsStart)||timeSlotStart.equals(tsStart))
						&& (timeSlotEnd.isBefore(tsEnd)||timeSlotEnd.equals(tsEnd))) {
					isDuringDowntime = true;
					break;
				}
			}		
		}
		return isDuringDowntime;
	}
	
   public Boolean isOnVacation(Date newDate ,Time newStartTime, Date currentDate){
    boolean check = false;
    TimeSlot oldTimeSlot = getTimeSlot();
    int oldDuration = calcActualTimeOfAppointment(getChosenItems());
    Time newEndTime = Time.valueOf(newStartTime.toLocalTime().plusMinutes(oldDuration));
	TimeSlot timeSlot = new TimeSlot(newDate, newStartTime, newDate, 
			newEndTime, getFlexiBook());   
    List<TimeSlot> vacations = FlexiBookApplication.getFlexiBook().getBusiness().getVacation();
	   for (TimeSlot aTimeSlot:vacations) {
		  if (isOverlap(aTimeSlot, timeSlot)) {
			  check = true;
	   }	    
	   
   }
	   return check;
  }
  
   public Boolean isOnHoliday(Date newDate ,Time newStartTime, Date currentDate) {
	   boolean check = false;
    TimeSlot oldTimeSlot = getTimeSlot();
    int oldDuration = calcActualTimeOfAppointment(getChosenItems());
    Time newEndTime = Time.valueOf(newStartTime.toLocalTime().plusMinutes(oldDuration));
	TimeSlot timeSlot = new TimeSlot(newDate, newStartTime, newDate, 
			newEndTime, getFlexiBook()); 
	   List<TimeSlot> holidaySlots = FlexiBookApplication.getFlexiBook().getBusiness().getHolidays();
	   for (TimeSlot aTimeSlot:holidaySlots) {
		   if (isOverlap(aTimeSlot, timeSlot)) {
			   check = true;
		   }
	   }
	   return check;
   }
	   
	  public static Boolean isOverlap(TimeSlot timeSlot1,TimeSlot timeSlot2) {
		  Boolean isUnavailable = false;
		  if (timeSlot1.getStartDate().equals(timeSlot2.getStartDate())) {
			  if ((timeSlot1.getStartTime()).after(timeSlot2.getStartTime())) {
					if (timeSlot1.getStartTime().before(timeSlot2.getEndTime())) {
						isUnavailable = true;
					}

				}
				else if (timeSlot1.getStartTime().before(timeSlot2.getStartTime())) {
					if (timeSlot1.getEndTime().after(timeSlot2.getStartTime())){
						isUnavailable = true;
					}
				}
		  }
		  
		  return isUnavailable;
	  }
	
	
 }
