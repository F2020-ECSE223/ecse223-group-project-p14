class Appointment{

	depend java.sql.Date;
	depend java.sql.Time;
	depend java.time.Duration;
	depend java.time.LocalTime;
	depend ca.mcgill.ecse.flexibook.controller.ControllerUtils;
	depend ca.mcgill.ecse.flexibook.model.BusinessHour.DayOfWeek;
	depend java.time.LocalDateTime;

	AppointmentStatus{

	Booked{
  
  	cancelAppointment(Date currentDate) [!SameDay(currentDate)]-> FinalState;
 
  	updateAppointmentTime(Date newDate ,Time newStartTime, Date currentDate)[isInGoodTimeSlot() && beforeToday(currentDate)]/
  	{updateTime(newDate , newStartTime);}->Booked;
  
  	updateAppointmentContent(String action, String optService, Date currentDate, Time currentTime)[isInGoodTimeSlotForUpdate(optService) && !SameDay(currentDate) ]/
  	{updateContent(action, optService);}->Booked;
  
  	startAppointment(Date currentDate, Time currentTime)[goodStartTime(currentDate, currentTime)] -> InProgress;

  	registeredNoShow()/{incrementNoShow();} -> FinalState; 
 
	}

	InProgress{
  
  	updateAppointmentContent(String action, String optService, Date currentDate, Time currentTime)[isInGoodTimeSlotForUpdate(optService)]
  	/{updateContent(action, optService);}-> InProgress;
  
  	finishedAppointment() -> FinalState ;
  
	}

	FinalState{

  	entry/{this.delete();}

		}    
		
		
	}
	
	

  // line 48 "../../../../../FlexiBookStateMachine.ump"
   public void updateTime(Date newDate, Time newStartTime){
    // get duration of the original service
		TimeSlot oldTimeSlot = getTimeSlot();
		Duration d = Duration.between(oldTimeSlot.getStartTime().toLocalTime(), oldTimeSlot.getEndTime().toLocalTime());
		// get the duration to set new end time. Since there is no change in combo item, the time is same
		int durationMinutes = (int) d.toMinutes();
		Time newEndTime = Time.valueOf(newStartTime.toLocalTime().plusMinutes(durationMinutes));
		TimeSlot timeSlot = new TimeSlot(newDate, newStartTime, newDate, newEndTime, getFlexiBook());
		setTimeSlot(timeSlot);
  }

  // line 60 "../../../../../FlexiBookStateMachine.ump"
   public void updateContent(String action, String optService){
    if (isInGoodTimeSlotForUpdate(optService)) {
    if(getBookableService() instanceof ServiceCombo) {
    	
    		
    	
    	TimeSlot oldTimeSlot = getTimeSlot();
    	ServiceCombo sc = (ServiceCombo)getBookableService();
    	List<String> serviceNameList = ControllerUtils.parseString(optService, ",");
		List<ComboItem> newlyAddedItem = new ArrayList<ComboItem>();
		
		if (action.equals("remove")) {

			// since appInSystem.getChosenItems() is inmutable by umple, have to create a deep copy here to iterate
			List<ComboItem> copy= new ArrayList<ComboItem>();
			for(ComboItem item: getChosenItems()) {
				copy.add(item);
			}
			for(ComboItem item: copy) {
				for (String name: serviceNameList) {
					// When we search that there is a name mentioned in the request
					// we check if it is mandatory or main service.
					// we can only removed it if the above two conditions are both wrong.
					if(item.getService().getName().equals(name)) {
						if(!item.getMandatory() && !name.equals(sc.getMainService().getService().getName())) {
							removeChosenItem(item);
						}
					}	
				}
			}
		}else if(action.equals("add")) {
				List<ComboItem> newListComboItem = new ArrayList<ComboItem>();
			
			for(ComboItem item: sc.getServices()) {
				// iterate through the combo as a template
				// iN THIS MANNER the combo item in the appointment will also follow certain order!
				// 1. ADD MANDATORY
				if(item.getMandatory() == true) {
					newListComboItem.add(item);
				}else {
					// 2. keeps the ones already exist
					if (getChosenItems().contains(item)) {
						newListComboItem.add(item);
					}else {
						// 3. add the chosen one
						for(String name: serviceNameList) {
							if(name.equals(item.getService().getName())) {
								newListComboItem.add(item);
							}
							
						}
						
					}
					
					
				}
			}
			
			this.chosenItems = newListComboItem;

			
			int newDuration = calcActualTimeOfAppointment(getChosenItems());
			Time newEndTime = Time.valueOf(oldTimeSlot.getStartTime().toLocalTime().plusMinutes(newDuration));
			TimeSlot timeSlot = new TimeSlot(oldTimeSlot.getStartDate(), oldTimeSlot.getStartTime(), oldTimeSlot.getEndDate(), 
					newEndTime, getFlexiBook());
			
			setTimeSlot(timeSlot);
			

			
		}
		  
	  }else if(getBookableService() instanceof Service) {
		  Service s = null;
		  for (BookableService bservice : getFlexiBook().getBookableServices()) {
				if (bservice.getName().equals(optService) && bservice instanceof Service) {
					s = (Service)bservice;
					break;
				}
			}
		  if(s != null) {
			  
			  setBookableService(s);
			  
			  // Shouldnt need this step since the original service is a single service already
			  if(chosenItems.size() !=0) {
				  chosenItems.clear();
			  }
			  Time startTime = getTimeSlot().getStartTime();
			  LocalTime aEndtime = startTime.toLocalTime().plusMinutes(s.getDuration());
			  Time endTime = Time.valueOf(aEndtime);
			  this.getTimeSlot().setEndTime(endTime);
		  }
	  }
	   }
  }

  // line 158 "../../../../../FlexiBookStateMachine.ump"
   public void incrementNoShow(){
    int noShowCount = this.getCustomer().getNoShowCount();
		noShowCount++;
		this.getCustomer().setNoShowCount(noShowCount);
  }

  // line 165 "../../../../../FlexiBookStateMachine.ump"
 public boolean isInGoodTimeSlot(){
    boolean check = true;
    List<TimeSlot> vacations = getFlexiBook().getBusiness().getVacation();
    List<TimeSlot> holidays = getFlexiBook().getBusiness().getHolidays();
    //check if overlapping with other appointment
		for(Appointment a : getFlexiBook().getAppointments()){
			if(a.getTimeSlot().getStartDate().equals(getTimeSlot().getStartDate()) 
					&& getTimeSlot().getStartTime().before(a.getTimeSlot().getStartTime())  
					&& getTimeSlot().getEndTime().after(a.getTimeSlot().getStartTime())
					&& (getFlexiBook().getAppointments().indexOf(a) != getFlexiBook().getAppointments().indexOf(this))){
				check = false;
			}
		}
	// check vacations
		for (TimeSlot vacation: vacations) {
			if(vacation.getStartDate().equals(getTimeSlot().getStartDate()) 
					&& vacation.getStartTime().before(getTimeSlot().getStartTime())
					&& vacation.getStartTime().after(getTimeSlot().getEndDate())) {
				check =false; 
			}
			
		}
	// check holidays 
		for (TimeSlot holiday: holidays) {
			if(holiday.getStartDate().equals(getTimeSlot().getStartDate()) 
					&& holiday.getStartTime().before(getTimeSlot().getStartTime())
					&& holiday.getStartTime().after(getTimeSlot().getEndDate())) {
				check = false; 
			}
			
		}
		return check;
  }

  // line 176 "../../../../../FlexiBookStateMachine.ump"
   public boolean goodStartTime(Date date, Time time){
    Time tempTime = getTimeSlot().getStartTime();
		boolean check = false;
		if ((time.after(tempTime) || time.equals(tempTime)) && date.equals(getTimeSlot().getStartDate())) {
			check = true;
		}
		return check;
  }

  // line 186 "../../../../../FlexiBookStateMachine.ump"
   public boolean SameDay(Date date){
    Date tempToday = getTimeSlot().getStartDate();
		boolean check = false; 
		if (date.equals(tempToday)) {
			check = true;
		}
		return check;
  }
  
  
     public boolean beforeToday(Date date) {
	   Date tempToday = getTimeSlot().getStartDate();
	   boolean check = false;
	   if (date.before(tempToday)) {
		   check =true;
	   }
	   return check;
   }

  // line 197 "../../../../../FlexiBookStateMachine.ump"
   public boolean isInGoodTimeSlotForUpdate(String optService){
    boolean check = true;
	    Service s = null;
	    List<TimeSlot> vacations = getFlexiBook().getBusiness().getVacation();
	    List<TimeSlot> holidaySlots = getFlexiBook().getBusiness().getHolidays();
	    for(BookableService service: getFlexiBook().getBookableServices()) {
	    	if(service.getName().equals(optService)) {
	    		s = (Service)service;
	    	}
	    }
	    // 1. check with other app
		for(Appointment a : getFlexiBook().getAppointments()){
			// only check appointment on the same day
			if(a.getTimeSlot().getStartDate().equals(getTimeSlot().getStartDate())&& 
					getFlexiBook().getAppointments().indexOf(a) != getFlexiBook().getAppointments().indexOf(this)) {
				// if single service: replace the endtime with new duration
				if(getBookableService() instanceof Service) {
					LocalTime aEndtime = getTimeSlot().getStartTime().toLocalTime().plusMinutes(s.getDuration());
					Time newEndTime  = Time.valueOf(aEndtime);
					if(newEndTime.after(a.getTimeSlot().getStartTime())) {
						check = false;
					}
				// if service combo, meaning we are appending something, we add to the endtime
				}else if(getBookableService() instanceof ServiceCombo) {
					LocalTime aEndtime = getTimeSlot().getEndTime().toLocalTime().plusMinutes(s.getDuration());
					Time newEndTime  = Time.valueOf(aEndtime);
					if(newEndTime.after(a.getTimeSlot().getStartTime())) {
						check = false;
					}
					
				}
				
			}
		}
		// 2. check with vacation
		for (TimeSlot vacation: vacations) {
			if(getBookableService() instanceof Service) {
				
				LocalDateTime vStart = ControllerUtils.combineDateAndTime(vacation.getStartDate(), vacation.getStartTime());
				LocalDateTime vEnd = ControllerUtils.combineDateAndTime(vacation.getEndDate(), vacation.getEndTime());
				
				LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
				//LocalDateTime aEnd = ControllerUtils.combineDateAndTime(this.getTimeSlot().getEndDate(), this.getTimeSlot().getEndTime());
				
				LocalDateTime aNewEnd = aStart.plusMinutes(s.getDuration());
				
				if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
					check = false;
				}
				
			}else if(getBookableService() instanceof ServiceCombo) {
				LocalDateTime vStart = ControllerUtils.combineDateAndTime(vacation.getStartDate(), vacation.getStartTime());
				LocalDateTime vEnd = ControllerUtils.combineDateAndTime(vacation.getEndDate(), vacation.getEndTime());
				
				LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
				LocalDateTime aEnd = ControllerUtils.combineDateAndTime(this.getTimeSlot().getEndDate(), this.getTimeSlot().getEndTime());
				
				LocalDateTime aNewEnd = aEnd.plusMinutes(s.getDuration());
				
				if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
					check = false;
				}
			}
		}
		
		// 2.5 check with holiday
				for (TimeSlot holiday: holidaySlots) {
					if(getBookableService() instanceof Service) {
						
						LocalDateTime vStart = ControllerUtils.combineDateAndTime(holiday.getStartDate(), holiday.getStartTime());
						LocalDateTime vEnd = ControllerUtils.combineDateAndTime(holiday.getEndDate(), holiday.getEndTime());
						
						LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
						//LocalDateTime aEnd = ControllerUtils.combineDateAndTime(this.getTimeSlot().getEndDate(), this.getTimeSlot().getEndTime());
						
						LocalDateTime aNewEnd = aStart.plusMinutes(s.getDuration());
						
						if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
							check = false;
						}
						
					}else if(getBookableService() instanceof ServiceCombo) {
						LocalDateTime vStart = ControllerUtils.combineDateAndTime(holiday.getStartDate(), holiday.getStartTime());
						LocalDateTime vEnd = ControllerUtils.combineDateAndTime(holiday.getEndDate(), holiday.getEndTime());
						
						LocalDateTime aStart = ControllerUtils.combineDateAndTime(this.getTimeSlot().getStartDate(), this.getTimeSlot().getStartTime());
						LocalDateTime aEnd = ControllerUtils.combineDateAndTime(this.getTimeSlot().getEndDate(), this.getTimeSlot().getEndTime());
						
						LocalDateTime aNewEnd = aEnd.plusMinutes(s.getDuration());
						
						if(!(aNewEnd.isBefore(vStart) || vEnd.isBefore(aStart))) {
							check = false;
						}
					}
				}
			
		// 3. check with workyime
		//First get the weekday
		DayOfWeek dOfWeek = ControllerUtils.getDoWByDate(timeSlot.getStartDate());
		// then check all businessHour list
		List<BusinessHour> bhList = getFlexiBook().getBusiness().getBusinessHours();
		// if single service: replace the endtime with new duration
		Time newEndTime = null;
		if(getBookableService() instanceof Service) {
			LocalTime aEndtime = getTimeSlot().getStartTime().toLocalTime().plusMinutes(s.getDuration());
			newEndTime  = Time.valueOf(aEndtime);
		// if service combo, meaning we are appending something, we add to the endtime
		}else if(getBookableService() instanceof ServiceCombo) {
			LocalTime aEndtime = getTimeSlot().getEndTime().toLocalTime().plusMinutes(s.getDuration());
			newEndTime  = Time.valueOf(aEndtime);
		}
		for(BusinessHour bh: bhList) {
			// check weekday

			if(dOfWeek .equals(bh.getDayOfWeek())) {
				// if the appointment is on that day, compare if the time slot is included by business hour
				if((timeSlot.getStartTime().toLocalTime().isAfter(bh.getStartTime().toLocalTime())
						|| timeSlot.getStartTime().toLocalTime().equals(bh.getStartTime().toLocalTime()))
						&&
						newEndTime.toLocalTime().isBefore(bh.getEndTime().toLocalTime())
						|| newEndTime.toLocalTime().equals(bh.getEndTime().toLocalTime())) {
					// let the check remain what it is
				}else {
					check = false;
				}
			}

		}
		
		return check;
  }

  // line 312 "../../../../../FlexiBookStateMachine.ump"
   private static  int calcActualTimeOfAppointment(List<ComboItem> comboItemList){
    int actualTime = 0;

		for (ComboItem ci : comboItemList) {
			actualTime = actualTime + ci.getService().getDuration();
		}

		return actualTime;
  }
 }
