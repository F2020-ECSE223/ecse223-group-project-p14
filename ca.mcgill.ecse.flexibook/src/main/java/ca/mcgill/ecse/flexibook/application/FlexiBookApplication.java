    /*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.flexibook.application;

import java.sql.Date;
import java.sql.Time;
import ca.mcgill.ecse.flexibook.model.FlexiBook;
import ca.mcgill.ecse.flexibook.model.User;
import ca.mcgill.ecse.flexibook.persistence.FlexiBookPersistence;
import ca.mcgill.ecse.flexibook.view.FlexiBookPage;



public class FlexiBookApplication {
	
	/**
	 * Indicating which user is currently in the system or can be null
	 * @author AntoineW
	 */
	private static User currentUser;
	
	private static Date currentDate;
	private static Time currentTime;
	
	private static FlexiBook flexiBook;
   
	public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run(){
                new FlexiBookPage().setVisible(true);
            }
        });
    }
	
	
	/**
	 * @author chengchen
	 */
    public static FlexiBook getFlexiBook() {
    	if (flexiBook == null) {
			// load model
	        flexiBook = FlexiBookPersistence.load();
		}
 		return flexiBook;
	}
    
    
    /**
     * 
     * This method set the current user.
     * @author AntoineW
     */
    public static void setCurrentLoginUser(User u) {
    	currentUser = u;
    }
    
    /**
     *
     * This method is only used when the user signs out.
     * @author AntoineW
     */
    public static void clearCurrentLoginUser() {
    	currentUser = null;
    }
    
    /**
     * 
     * This method get the current user in the system
     * Controller depend on this method to know whether the user is an Owner or a Customer.
     * @author AntoineW
     */
    public static User getCurrentLoginUser() {
    	return currentUser;
    }
    
    /**
     * @author AntoineW
     */
    public static Date getCurrentDate() {
    	return new Date(System.currentTimeMillis());
    }
    
    /**
     * @author AntoineW
     */
    public static Time getCurrentTime() {
    	return new Time(System.currentTimeMillis()); 	
    }
    
    /**
     * @param date
     * @author AntoineW
     */
    public static void setCurrentDate(Date date) {
    	currentDate = date;
    }
    
    /**
     * @param time
     * @author AntoineW
     */
    public static void setCurrentTime(Time time) {
    	currentTime = time;
    }
    
    /**
     * Overloaded version for cucumber test. It needs to input a date and time as current time
     * @param isForTesting Parameter for overloading, can either be true or false
     * @return
     * @author AntoineW
     */
    public static Time getCurrentTime(boolean isForTesting) {
    	
    	if(currentTime != null) {
    		return currentTime;
    	}else {
    		return getCurrentTime();
    	}
    	
    }
    
    /**
     * Overloaded version for cucumber test. It needs to input a date and time as current
     * @param isForTesting Parameter for overloading, can either be true or false
     * @return
     * @author AntoineW
     */
    public static Date getCurrentDate(boolean isForTesting) {
    	
    	if(currentDate != null) {
    		return currentDate;
    	}else {
    		return getCurrentDate();
    	}
    }
    
    
    
}